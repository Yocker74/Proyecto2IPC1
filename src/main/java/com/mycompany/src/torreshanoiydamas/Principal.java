package com.mycompany.src.torreshanoiydamas;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import com.mycompany.src.torreshanoiydamas.Pila;
import com.mycompany.src.torreshanoiydamas.Node;
import com.mycompany.src.torreshanoiydamas.users.Users;
import java.awt.event.ActionEvent;
import java.text.DecimalFormat;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.SwingConstants;
import javax.swing.JDialog;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author mdyoc
 */

public final class Principal extends javax.swing.JFrame{

    /**
     * Creates new form Principal
     */
    Timer timer;
    Pila pilaTowerA,pilaTowerB,pilaTowerC;

    int counterMoves=0;
    double numMovs=0;
    DefaultTableModel modelA, modelB, modelC;
    int target=0;
    int second=0;
    int minute=0;
    String ddSecond;
    String ddMinute;
    DecimalFormat dFormat= new DecimalFormat("00");
    principalMenu principal;
    Users user;
    Principal newGame;
    
  
    public Principal(principalMenu principal,Users user) {
        initComponents();
        this.principal=principal;
        this.user=user;
        modelA= (DefaultTableModel)tower1.getModel();
        modelA.setRowCount(8);
        modelB= (DefaultTableModel)tower2.getModel();
        modelB.setRowCount(8);
        modelC= (DefaultTableModel)tower3.getModel();
        modelC.setRowCount(8);
        
        DefaultTableCellRenderer renderA = new DefaultTableCellRenderer();
        renderA.setHorizontalAlignment(SwingConstants.CENTER);
        tower1.getColumnModel().getColumn(0).setCellRenderer(renderA);
        
        DefaultTableCellRenderer renderB = new DefaultTableCellRenderer();
        renderB.setHorizontalAlignment(SwingConstants.CENTER);
        tower2.getColumnModel().getColumn(0).setCellRenderer(renderB);
        DefaultTableCellRenderer renderC = new DefaultTableCellRenderer();
        renderC.setHorizontalAlignment(SwingConstants.CENTER);
        tower3.getColumnModel().getColumn(0).setCellRenderer(renderC);
        principal.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        jButton1 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tower2 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tower3 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tower1 = new javax.swing.JTable();
        fromatob = new javax.swing.JButton();
        fromctoa = new javax.swing.JButton();
        fromatoc = new javax.swing.JButton();
        frombtoc = new javax.swing.JButton();
        fromctob = new javax.swing.JButton();
        frombtoa = new javax.swing.JButton();
        noOfDisks = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        noOfMoves = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        startBtn = new javax.swing.JButton();
        hintBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        counterLabel = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        minMovs = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        jButton1.setText("jButton1");

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setFocusable(false);

        tower2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Torre B"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tower2.setAutoscrolls(false);
        tower2.setFocusable(false);
        tower2.setRowSelectionAllowed(false);
        tower2.setShowHorizontalLines(false);
        tower2.setShowVerticalLines(false);
        jScrollPane1.setViewportView(tower2);
        if (tower2.getColumnModel().getColumnCount() > 0) {
            tower2.getColumnModel().getColumn(0).setResizable(false);
        }

        jScrollPane2.setFocusable(false);

        tower3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Torre C"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tower3.setAutoscrolls(false);
        tower3.setFocusable(false);
        tower3.setRowSelectionAllowed(false);
        tower3.setShowHorizontalLines(false);
        tower3.setShowVerticalLines(false);
        jScrollPane2.setViewportView(tower3);
        if (tower3.getColumnModel().getColumnCount() > 0) {
            tower3.getColumnModel().getColumn(0).setResizable(false);
        }

        jScrollPane3.setFocusable(false);

        tower1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Torre A"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tower1.setAutoscrolls(false);
        tower1.setFocusable(false);
        tower1.setRowSelectionAllowed(false);
        tower1.setShowHorizontalLines(false);
        tower1.setShowVerticalLines(false);
        jScrollPane3.setViewportView(tower1);
        if (tower1.getColumnModel().getColumnCount() > 0) {
            tower1.getColumnModel().getColumn(0).setResizable(false);
        }

        fromatob.setText("Mover a B");
        fromatob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromatobActionPerformed(evt);
            }
        });

        fromctoa.setText("Mover a B");
        fromctoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromctoaActionPerformed(evt);
            }
        });

        fromatoc.setText("Mover a C");
        fromatoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromatocActionPerformed(evt);
            }
        });

        frombtoc.setText("Mover a C");
        frombtoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frombtocActionPerformed(evt);
            }
        });

        fromctob.setText("Mover a A");
        fromctob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromctobActionPerformed(evt);
            }
        });

        frombtoa.setText("Mover a A");
        frombtoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frombtoaActionPerformed(evt);
            }
        });

        noOfDisks.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3", "4", "5", "6", "7", "8" }));
        noOfDisks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfDisksActionPerformed(evt);
            }
        });

        jLabel1.setText("NÃºmero de argollas en las torres");

        noOfMoves.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        noOfMoves.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Movimientos");

        startBtn.setText("Iniciar");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        hintBtn.setText("Resolver");
        hintBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintBtnActionPerformed(evt);
            }
        });

        counterLabel.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 24)); // NOI18N
        counterLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        counterLabel.setText("00:00");

        jButton2.setText("jButton2");

        jButton3.setText("jButton3");

        minMovs.setText("jLabel4");

        jMenu1.setText("Opciones de Juego");
        jMenu1.add(jSeparator1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        jMenuItem2.setText("GuardarPartida");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        jMenuItem1.setText("Rendirse");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        jMenuItem3.setText("Regresar a la pantalla de Inicio");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Cargar Partida");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fromatob, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromatoc, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(frombtoa, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(frombtoc, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(79, 79, 79))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fromctob, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fromctoa, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hintBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noOfDisks, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(noOfMoves, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(counterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(minMovs, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(counterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fromctoa)
                        .addComponent(fromctob, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(frombtoc, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(frombtoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fromatoc)
                        .addComponent(fromatob)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(noOfDisks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(hintBtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(startBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(noOfMoves, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(68, 68, 68)
                .addComponent(minMovs))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void moveFromAToB(){
    try{
        if(pilaTowerA.getCounterNodes()>0){
            Node platform = new Node();
            platform.setData(pilaTowerA.peek());
            if(pilaTowerB.getCounterNodes()>0){
                if(platform.getData().compareTo(pilaTowerB.peek())>0){
                    return;
                }
            }
            pilaTowerA.pop();
            pilaTowerB.push(platform);
            showTowerA();
            showTowerB();
            ShowCounterMovements();
        }
    }catch(Exception e){
        
    }
}
private void moveFromCToB(){
    try{
        if(pilaTowerC.getCounterNodes()>0){
            Node platform = new Node();
            platform.setData(pilaTowerC.peek());
            if(pilaTowerB.getCounterNodes()>0){
                if(platform.getData().compareTo(pilaTowerB.peek())>0){
                    return;
                }
            }
            pilaTowerC.pop();
            pilaTowerB.push(platform);
            showTowerC();
            showTowerB();
            ShowCounterMovements();
        }
    }catch(Exception e){
        
    }
}

    private void fromatobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromatobActionPerformed
      moveFromAToB();
        // TODO add your handling code here:
    }//GEN-LAST:event_fromatobActionPerformed
private void moveFromAToC(){
    try{
        if(pilaTowerA.getCounterNodes()>0){
            Node platform = new Node();
            platform.setData(pilaTowerA.peek());
            if(pilaTowerC.getCounterNodes()>0){
                if(platform.getData().compareTo(pilaTowerC.peek())>0){
                    return;
                }
            }
            pilaTowerA.pop();
            pilaTowerC.push(platform);
            showTowerA();
            showTowerC();
            ShowCounterMovements();
            
            if(pilaTowerC.getCounterNodes()==target){
                JOptionPane.showMessageDialog(null,"Juego Finalizado","Felicitaciones",JOptionPane.INFORMATION_MESSAGE);
                user.setjJHanoi(user.getjJHanoi()+1);
                user.setjGHanoi(user.getjGHanoi()+1);
                user.setTiempoHanoi(user.getTiempoHanoi()+second+60*minute);
                user.setJugadasRealizadasHanoi(user.getJugadasRealizadasHanoi()+counterMoves);
            }
        }
    }catch(Exception e){
        
    }
}
    private void fromatocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromatocActionPerformed
moveFromAToC();        // TODO add your handling code here:
    }//GEN-LAST:event_fromatocActionPerformed

    private void fromctobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromctobActionPerformed
moveFromCToA();        // TODO add your handling code here:
    }//GEN-LAST:event_fromctobActionPerformed

    private void reinitiate(){
        try{
            if(!minMovs.getText().equals("")){
                
                Clean();
                initiate();
            }
        }catch(Exception e){
            System.out.println("Error: "+ e.getMessage());
        }
    }
    @SuppressWarnings("empty-statement")
    private void initiate(){
        try{
           
            pilaTowerA = new Pila();
            pilaTowerB = new Pila();
            pilaTowerC = new Pila();
            target=Integer.parseInt(noOfDisks.getSelectedItem().toString());
            numMovs = Math.pow(2, target)-1;
            for (int i = target; i >=1; i--) {
                Node platform = new Node();
                String disk="";
                for (int j = i; j >0; j--) {
                    disk +="O";                
                }
                platform.setData(disk);
                pilaTowerA.push(platform);
            }
            showTowerA();
            showTowerB();
            showTowerC();
    
        }catch(Exception e){
            System.out.println("Error: "+e.getMessage());
        }
    }
    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
 second=0;
minute=0;

             simpleTimer();
        timer.start();
        startBtn.setVisible(false);
        
  initiate();
        reinitiate();
         
    }//GEN-LAST:event_startBtnActionPerformed

    private void hintBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintBtnActionPerformed
if(  pilaTowerC.getCounterNodes()!= target){
    reinitiate();
    stop=false;
    solveHanoi(target, pilaTowerA,pilaTowerB,pilaTowerC);
}
                // TODO add your handling code here:
    }//GEN-LAST:event_hintBtnActionPerformed
private void moveFromBToA(){
    try{
        if(pilaTowerB.getCounterNodes()>0){
            Node platform = new Node();
            platform.setData(pilaTowerB.peek());
            if(pilaTowerA.getCounterNodes()>0){
                if(platform.getData().compareTo(pilaTowerA.peek())>0){
                    return;
                }
            }
            pilaTowerB.pop();
            pilaTowerA.push(platform);
            showTowerB();
            showTowerA();
            ShowCounterMovements();
        }
    }catch(Exception e){
        
    }
}
private void moveFromCToA(){
    try{
        if(pilaTowerC.getCounterNodes()>0){
            Node platform = new Node();
            platform.setData(pilaTowerC.peek());
            if(pilaTowerA.getCounterNodes()>0){
                if(platform.getData().compareTo(pilaTowerA.peek())>0){
                    return;
                }
            }
            pilaTowerC.pop();
            pilaTowerA.push(platform);
            showTowerC();
            showTowerA();
            ShowCounterMovements();
        }
    }catch(Exception e){
        
    }
}

    private void frombtoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frombtoaActionPerformed
moveFromBToA();        // TODO add your handling code here:
    }//GEN-LAST:event_frombtoaActionPerformed
private void moveFromBToC(){
    try{
        if(pilaTowerB.getCounterNodes()>0){
            Node platform = new Node();
            platform.setData(pilaTowerB.peek());
            if(pilaTowerC.getCounterNodes()>0){
                if(platform.getData().compareTo(pilaTowerC.peek())>0){
                    return;
                }
            }
            pilaTowerB.pop();
            pilaTowerC.push(platform);
            showTowerB();
            showTowerC();
            ShowCounterMovements();
            
            if(pilaTowerC.getCounterNodes()==target&& counterMoves==numMovs){
                timer.stop();
                JOptionPane.showMessageDialog(null,"Juego Finalizado","Felicitaciones",JOptionPane.INFORMATION_MESSAGE);
          
            }else if(pilaTowerC.getCounterNodes()==target&& counterMoves!=numMovs){
                timer.stop();
                JOptionPane.showMessageDialog(null,"Juego Finalizado","Felicitaciones",JOptionPane.INFORMATION_MESSAGE);
            
            }
        }
    }catch(Exception e){
        
    }
}
    private void frombtocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frombtocActionPerformed
moveFromBToC();        // TODO add your handling code here:
    }//GEN-LAST:event_frombtocActionPerformed

    private void fromctoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromctoaActionPerformed
moveFromCToB();        // TODO add your handling code here:
    }//GEN-LAST:event_fromctoaActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

ArrayList<Object> data = new ArrayList<Object>();
data.add(this);

        try{
            FileOutputStream fileOut = new  FileOutputStream("data.ser");
            ObjectOutputStream out = new  ObjectOutputStream(fileOut);
            out.writeObject(data);
            out.close();
            fileOut.close();
            System.out.println("Se salva la data");
        }catch(IOException i){
            i.printStackTrace();
        }
        

          
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        counterMoves=0;
        second=0;
minute=0;
        startBtn.setVisible(true);
        timer.stop();

        Clean();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        this.setVisible(false);
        this.principal.setVisible(true);

        second=0;

        minute=0;
        startBtn.setVisible(true);
        timer.stop();

        Clean();
// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void noOfDisksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfDisksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfDisksActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
  
        ArrayList<Object> deserialized= new ArrayList<Object>();
        try{
            FileInputStream fileIn= new FileInputStream("data.ser");
            ObjectInputStream in = new ObjectInputStream(fileIn);
            deserialized = (ArrayList<Object>)in.readObject();
            in.close();
        }catch(IOException i){
        }catch(ClassNotFoundException c){
            
        }
        
        newGame=user.juegosHanoi.get(0);


    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
     * @param args the command line arguments
     */

    private void Clean(){
    counterMoves=0;
    numMovs=0;
  //  noOfDisks.setSelectedItem(String.valueOf(target));
    }
    private void ShowCounterMovements(){
        counterMoves++;
        noOfMoves.setText(String.valueOf(counterMoves));
    }
    private void showTowerA(){
        ((DefaultTableModel)tower1.getModel()).setRowCount(0);
        modelA.setRowCount(8);
        Node l;
        int rowDisk = 8-pilaTowerA.getCounterNodes();
        if(pilaTowerA.getCounterNodes()>0){
            for(l= (pilaTowerA).getHeader(); l.getDown() !=null ; l=l.getDown()){
            String[] normalVector = {l.getData()};
            modelA.insertRow(rowDisk, normalVector);
            rowDisk++;
        }
            if(l.getDown()==null){
                String[] normalVector = {l.getData()};
                modelA.insertRow(rowDisk, normalVector);
            }
        }
        tower1.setModel(modelA);
        modelA.setRowCount(8);
    }
    private void showTowerB(){
        ((DefaultTableModel)tower2.getModel()).setRowCount(0);
        modelB.setRowCount(8);
        Node l;
        int rowDisk = 8-pilaTowerB.getCounterNodes();
        if(pilaTowerB.getCounterNodes()>0){
            for(l= (pilaTowerB).getHeader(); l.getDown() !=null ; l=l.getDown()){
            String[] normalVector = {l.getData()};
            modelB.insertRow(rowDisk, normalVector);
            rowDisk++;
        }
            if(l.getDown()==null){
                String[] normalVector = {l.getData()};
                modelB.insertRow(rowDisk, normalVector);
            }
        }
        tower2.setModel(modelB);
        modelB.setRowCount(8);
    }
    private void showTowerC(){
        ((DefaultTableModel)tower3.getModel()).setRowCount(0);
        modelC.setRowCount(8);
        Node l;
        int rowDisk = 8-pilaTowerC.getCounterNodes();
        if(pilaTowerC.getCounterNodes()>0){
            for(l= (pilaTowerC).getHeader(); l.getDown() !=null ; l=l.getDown()){
            String[] normalVector = {l.getData()};
            modelC.insertRow(rowDisk, normalVector);
            rowDisk++;
        }
            if(l.getDown()==null){
                String[] normalVector = {l.getData()};
                modelC.insertRow(rowDisk, normalVector);
            }
        }
        tower3.setModel(modelC);
        modelC.setRowCount(8);
    }
    
    public void simpleTimer(){
        timer = new Timer(1000,  new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                second++;
                ddSecond= dFormat.format(second);
                ddMinute= dFormat.format(minute);
                
                counterLabel.setText(ddMinute+":"+ddSecond); 
                if(second==60){
                    second=0;
                    minute++; 
                    
                    counterLabel.setText(ddMinute+":"+ddSecond); 
                }
            }
        });
    }
    
    private void movePlatform(Pila origin, Pila destiny){
        if(stop==false){
            Node platform= new Node();
            
            platform.setData(origin.peek());
            origin.pop();
            destiny.push(platform);
            showTowerA();
            showTowerB();
            showTowerC();
            ShowCounterMovements();
            JOptionPane pane = new JOptionPane("",JOptionPane.QUESTION_MESSAGE,JOptionPane.YES_NO_OPTION) ;
            JDialog dialog = pane.createDialog("Seguir resolviendo");
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
            int opt = (int)pane.getValue();
            if (opt==JOptionPane.NO_OPTION){
                stop= true;
            }
        }
    }
    boolean stop=false;
    private void solveHanoi(int n, Pila A, Pila B, Pila C){
        if(n==1){
            movePlatform(A,C);
            
        }else{
            
            solveHanoi( n-1,A ,C,B);
            movePlatform(A,C);
            solveHanoi(n-1, B,A,C);
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel counterLabel;
    private javax.swing.JButton fromatob;
    private javax.swing.JButton fromatoc;
    private javax.swing.JButton frombtoa;
    private javax.swing.JButton frombtoc;
    private javax.swing.JButton fromctoa;
    private javax.swing.JButton fromctob;
    private javax.swing.JButton hintBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToggleButton jToggleButton1;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    private javax.swing.JLabel minMovs;
    private javax.swing.JComboBox<String> noOfDisks;
    private javax.swing.JLabel noOfMoves;
    private javax.swing.JButton startBtn;
    private javax.swing.JTable tower1;
    private javax.swing.JTable tower2;
    private javax.swing.JTable tower3;
    // End of variables declaration//GEN-END:variables

    private void clone(String hola) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
